using System;
using System.Collections.Generic;
using System.Data;
using ARM_User.BusinessLayer.Common;
using ARM_User.BusinessLayer.Guides;
using ARM_User.DataLayer.DataSet.GuidesDataSet;
using ARM_User.MapperLayer.Common;
using Microsoft.Practices.EnterpriseLibrary.ExceptionHandling;
using Oracle.DataAccess.Client;
using Oracle.DataAccess.Types;

namespace ARM_User.MapperLayer.Guides
{
  public class IssuersBaseAssetMapper
    : SimpleMapper<IssuersBaseAsset, IssuersBaseAssetList, IssuersBaseAssetDS.ISSUERS_BASE_ASSETDataTable, IssuersBaseAssetDS.ISSUERS_BASE_ASSETRow>
  {
    protected override IssuersBaseAsset CreateByRow(IssuersBaseAssetDS.ISSUERS_BASE_ASSETRow row)
    {
      var obj = new IssuersBaseAsset(
        row.ID,        
        row.NAMERU,
        row.NAMEKZ,
        MapperRegistry.Instance.GetOLFMapper().Find(row.ID_OLF),
        MapperRegistry.Instance.GetCountryMapper().Find(row.ID_COUNTRY),
        row.IS_DELETE == 1,
        MapperRegistry.Instance.GetUserMapper().Find(row.ID_USR),
        row.DATLAST);

      return obj;
    }

    public override void Insert(ICollection<DomainObject> objCollection)
    {
      try
      {
        foreach (var obj in objCollection)
        {
          var IssuersBaseAsset = (IssuersBaseAsset) obj;

          using (var cmd = Connection.CreateCommand())
          {
            cmd.BindByName = true;
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandText = "G_Insert_IssuersBaseAsset";
            cmd.Parameters.Add("Id_", OracleDbType.Decimal, ParameterDirection.Output);
            cmd.Parameters.Add("Id_Olf_", OracleDbType.Decimal, ParameterDirection.Input);
            cmd.Parameters.Add("NameRu_", OracleDbType.Varchar2, ParameterDirection.Input);
            cmd.Parameters.Add("NameKz_", OracleDbType.Varchar2, ParameterDirection.Input);
            cmd.Parameters.Add("Is_Delete_", OracleDbType.Decimal, ParameterDirection.Input);
            cmd.Parameters.Add("Err_Code", OracleDbType.Decimal, ParameterDirection.Output);
            cmd.Parameters.Add("Err_Msg", OracleDbType.Varchar2, ParameterDirection.Output);

            cmd.Parameters["Id_Olf_"].Value = IssuersBaseAsset.Olf.Id;
            cmd.Parameters["Nameru_"].Value = IssuersBaseAsset.Nameru;
            cmd.Parameters["Namekz_"].Value = IssuersBaseAsset.Namekz;
            cmd.Parameters["Is_Delete_"].Value = IssuersBaseAsset.IsDelete ? 1 : 0;
            cmd.Parameters["Err_Msg"].Size = 4000;

            cmd.ExecuteNonQuery();

            if (!((OracleDecimal) cmd.Parameters["Err_Code"].Value).IsNull)
            {
              var errCode = ((OracleDecimal) cmd.Parameters["Err_Code"].Value).ToInt32();
              var errMsg = cmd.Parameters["Err_Msg"].Value.ToString();
              if (errCode != 0)
                throw new OraCustomException(errCode, errMsg);
            }

            obj.SetId(((OracleDecimal) (cmd.Parameters["Id_"].Value)).Value);

            MarkAsNeedLoad();
          }
        }
      }
      catch (Exception ex)
      {
        var rethrow = ExceptionPolicy.HandleException(ex, "Data Policy");
        if (rethrow)
          throw;
      }
    }

    public override void Update(ICollection<DomainObject> objCollection)
    {
      try
      {
        foreach (var obj in objCollection)
        {
          var IssuersBaseAsset = (IssuersBaseAsset) obj;

          using (var cmd = Connection.CreateCommand())
          {
            cmd.BindByName = true;
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandText = "G_Update_IssuersBaseAsset";
            cmd.Parameters.Add("Id_", OracleDbType.Decimal, ParameterDirection.Input);
            cmd.Parameters.Add("Id_Olf_", OracleDbType.Decimal, ParameterDirection.Input);
            cmd.Parameters.Add("NameRu_", OracleDbType.Varchar2, ParameterDirection.Input);
            cmd.Parameters.Add("NameKz_", OracleDbType.Varchar2, ParameterDirection.Input);
            cmd.Parameters.Add("Is_Delete_", OracleDbType.Decimal, ParameterDirection.Input);            
            cmd.Parameters.Add("Err_Code", OracleDbType.Decimal, ParameterDirection.Output);
            cmd.Parameters.Add("Err_Msg", OracleDbType.Varchar2, ParameterDirection.Output);

            cmd.Parameters["Id_"].Value = IssuersBaseAsset.Id;
            cmd.Parameters["Id_Olf_"].Value = IssuersBaseAsset.Olf.Id;
            cmd.Parameters["Nameru_"].Value = IssuersBaseAsset.Nameru;
            cmd.Parameters["Namekz_"].Value = IssuersBaseAsset.Namekz;
            cmd.Parameters["Is_Delete_"].Value = IssuersBaseAsset.IsDelete ? 1 : 0;
            cmd.Parameters["Err_Msg"].Size = 4000;

            cmd.ExecuteNonQuery();

            if (!((OracleDecimal) cmd.Parameters["Err_Code"].Value).IsNull)
            {
              var errCode = ((OracleDecimal) cmd.Parameters["Err_Code"].Value).ToInt32();
              var errMsg = cmd.Parameters["Err_Msg"].Value.ToString();
              if (errCode != 0)
                throw new OraCustomException(errCode, errMsg);
            }

            MarkAsNeedLoad();
          }
        }
      }
      catch (Exception ex)
      {
        var rethrow = ExceptionPolicy.HandleException(ex, "Data Policy");
        if (rethrow)
          throw;
      }
    }

    public override void Delete(ICollection<DomainObject> objCollection)
    {
      try
      {
        foreach (var obj in objCollection)
        {
          using (var cmd = Connection.CreateCommand())
          {
            cmd.BindByName = true;
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandText = "S_G_DELETE_IssuersBaseAsset";
            cmd.Parameters.Add("Id_", OracleDbType.Decimal, ParameterDirection.Input);
            cmd.Parameters.Add("Err_Code", OracleDbType.Decimal, ParameterDirection.Output);
            cmd.Parameters.Add("Err_Msg", OracleDbType.Varchar2, ParameterDirection.Output);
            cmd.Parameters["Id_"].Value = obj.Id;
            cmd.Parameters["Err_Msg"].Size = 4000;

            cmd.ExecuteNonQuery();

            if (!((OracleDecimal) cmd.Parameters["Err_Code"].Value).IsNull)
            {
              var errCode = ((OracleDecimal) cmd.Parameters["Err_Code"].Value).ToInt32();
              var errMsg = cmd.Parameters["Err_Msg"].Value.ToString();
              if (errCode != 0)
                throw new OraCustomException(errCode, errMsg);
            }

            MarkAsNeedLoad();
          }
        }
      }
      catch (Exception ex)
      {
        var rethrow = ExceptionPolicy.HandleException(ex, "Data Policy");
        if (rethrow)
          throw;
      }
    }

    protected override string IdName()
    {
      return "ID";
    }
  }
}