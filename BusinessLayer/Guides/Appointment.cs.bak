using System;
using ARM_User.BusinessLayer.Common;
using Microsoft.Practices.EnterpriseLibrary.ExceptionHandling;

//Справочник  "Должность"

namespace ARM_User.BusinessLayer.Guides
{
    public class Appointment : LocalizedSimpleDO
  {
    public Appointment()
    {
    }

    public Appointment(decimal id, string nameRu, string nameKz, bool isDelete, User editUser, DateTime? editTime)
        : base(id, nameRu, nameKz)
    {
      this.nameRu = nameRu;
      this.nameKz = nameKz;
      this.isDelete = isDelete;
    }

    public static Appointment CreateNew()
    {
      return CreateNew<Appointment>();
    }

    #region Fileds

    private String nameRu, nameKz;
    private bool isDelete;

    #endregion Fileds

    #region propertis

    public string NameRu
    {
      get { return nameRu; }
      set
      {
        NotifyBeforeObjectChange();
        nameRu = value;
        NotifyPropertyChanged("NameRu");
      }
    }

    public string NameKz
    {
      get { return nameKz; }
      set
      {
        NotifyBeforeObjectChange();
        nameKz = value;
        NotifyPropertyChanged("NameKz");
      }
    }

    public bool IsDelete
    {
      get { return isDelete; }
      set
      {
        NotifyBeforeObjectChange();
        isDelete = value;
        NotifyPropertyChanged("IsDelete");
      }
    }

    public override void Delete()
    {
      try
      {
        UnitOfWork.Instance.BeginTransaction();
        IsDelete = true;
        UnitOfWork.Instance.Commit();
      }
      catch (Exception ex)
      {
        if (UnitOfWork.Instance.IsTransactionStarted)
        {
          UnitOfWork.Instance.Rollback();
        }
        var rethrow = ExceptionPolicy.HandleException(ex, "Display Policy");
        if (rethrow)
        {
          throw;
        }
      }
    }

    #endregion
  }

  public class AppointmentList : DOList<Appointment>
  {
  }
}