using System;
using System.Windows.Forms;
using ARM_User.BusinessLayer.Common;
using ARM_User.BusinessLayer.Guides;
using ARM_User.DisplayLayer.Base;
using ARM_User.DisplayLayer.Guides.PopupList;
using ARM_User.ServiceLayer.Service.Editor;
using BSB.Common;
using DevExpress.XtraEditors;
using DevExpress.XtraEditors.Controls;

namespace ARM_User.DisplayLayer.Guides
{
  public partial class AddCategoryShareForm : SimpleDBEditGBForm
  {
    protected AddCategoryShare addcategoryshare;

    public AddCategoryShareForm()
    {
      InitializeComponent();

      UnitOfWork.Instance.BeginTransaction();
      addcategoryshare = AddCategoryShare.CreateNew();
      State = EditorState.Insert;
    }

    public AddCategoryShareForm(AddCategoryShare addcategoryshare, EditorState state)
    {
      InitializeComponent();
      this.state = state;
      if (State == EditorState.Edit)
        UnitOfWork.Instance.BeginTransaction();
      this.addcategoryshare = addcategoryshare;
    }

    public AddCategoryShare AddCategoryShare
    {
      get { return addcategoryshare; }
    }

    private void AddCategoryShareForm_Load(object sender, EventArgs e)
    {
      if (Site != null) return;

      MainBS.Add(addcategoryshare);
      edDesignationNIN.DataBindings.Add("EditValue", MainBS, "DesignationNIN", true);
      edNameRu.DataBindings.Add("EditValue", MainBS, "Nameru", true);
      edNameKz.DataBindings.Add("EditValue", MainBS, "Namekz", true);
      edCategory.DataBindings.Add("EditValue", MainBS, "CategoryECB.NameRu", true);
      edAbility.DataBindings.Add("EditValue", MainBS, "AbilityConvert.NameRu", true);
      cbDel.DataBindings.Add("EditValue", MainBS, "Isdelete", true);
      wdDateLast.DataBindings.Add("EditValue", MainBS, "EditTime", true);
      wdUserName.DataBindings.Add("EditValue", MainBS, "EditUser", true);


      readOnlyControls.Add(wdDateLast);
      readOnlyControls.Add(wdUserName);

      SetEditorsStatus();

      foreach (var control in readOnlyControls)
        EditorUtils.ReadOnlyControl(control, true);

      if (State == EditorState.Insert)
        Text = "Ввод новых реквизитов справочника \"Доп.признак категорий акций\"";
      else if (State == EditorState.Edit)
        Text = "Редактирование реквизитов справочника \"Доп.признак категорий акций\"";
    }

    protected override bool Validate()
    {
        if (string.IsNullOrEmpty(addcategoryshare.DesignationNIN) || string.IsNullOrWhiteSpace(addcategoryshare.DesignationNIN)) //if (addcategoryshare.DesignationNIN == null)
      {
        XtraMessageBox.Show(
          LangTranslate.UiGetText("Обозначение для НИН не заполнено"),
          LangTranslate.UiGetText("Внимание"), MessageBoxButtons.OK, MessageBoxIcon.Warning);
        edDesignationNIN.Focus();
        return false;
      }
        if (string.IsNullOrEmpty(addcategoryshare.NameRu) || string.IsNullOrWhiteSpace(addcategoryshare.NameRu)) //if (addcategoryshare.NameRu == null)
      {
        XtraMessageBox.Show(
          LangTranslate.UiGetText("Наименование (рус) не заполнено"),
          LangTranslate.UiGetText("Внимание"), MessageBoxButtons.OK, MessageBoxIcon.Warning);
        edNameRu.Focus();
        return false;
      }
        if (string.IsNullOrEmpty(addcategoryshare.NameKz) || string.IsNullOrWhiteSpace(addcategoryshare.NameKz)) //if (addcategoryshare.NameKz == null)
      {
        XtraMessageBox.Show(
          LangTranslate.UiGetText("Наименование (каз) не заполнено"),
          LangTranslate.UiGetText("Внимание"), MessageBoxButtons.OK, MessageBoxIcon.Warning);
        edNameKz.Focus();
        return false;
      }
        if (edCategory.Text == "")
        {
            XtraMessageBox.Show(
              LangTranslate.UiGetText("Вид и категория акций не выбран"),
              LangTranslate.UiGetText("Внимание"), MessageBoxButtons.OK, MessageBoxIcon.Warning);
            edCategory.Focus();
            return false;
        }
        if (edAbility.Text == "")
        {
            XtraMessageBox.Show(
              LangTranslate.UiGetText("Возможность конвертирования не выбрана"),
              LangTranslate.UiGetText("Внимание"), MessageBoxButtons.OK, MessageBoxIcon.Warning);
            edAbility.Focus();
            return false;
        }


      return true;
    }

    private void edCategory_ButtonClick(object sender, ButtonPressedEventArgs e)
    {
      var f = new CategoryECBPopupListForm();
      f.SelectedObject = addcategoryshare.CategoryECB;
      // f.ShowDialog();

      if (f.ShowDialog() == DialogResult.OK)
      {
        AddCategoryShare.CategoryECB = (CategoryECB) f.SelectedObject;
        edCategory.Text = AddCategoryShare.CategoryECB.NameRu;
      }
    }

    private void edAbility_ButtonClick(object sender, ButtonPressedEventArgs e)
    {
      var f = new AbilityConvertPopupListForm();
      f.SelectedObject = addcategoryshare.AbilityConvert;
      // f.ShowDialog();

      if (f.ShowDialog() == DialogResult.OK)
      {
        AddCategoryShare.AbilityConvert = (AbilityConvert) f.SelectedObject;
        edAbility.Text = AddCategoryShare.AbilityConvert.NameRu;
      }
    }

  }
}