using System;
using System.Collections.Generic;
using System.Data;
using ARM_User.BusinessLayer.Common;
using ARM_User.BusinessLayer.Guides;
using ARM_User.DataLayer.DataSet.GuidesDataSet;
using ARM_User.MapperLayer.Common;
using Microsoft.Practices.EnterpriseLibrary.ExceptionHandling;
using Oracle.DataAccess.Client;
using Oracle.DataAccess.Types;

namespace ARM_User.MapperLayer.Guides
{
    public class ViolationKndMapper
      : SimpleMapper<ViolationKnd, ViolationKndList, ViolationKndDS.S_G_VIOLATION_KNDDataTable, ViolationKndDS.S_G_VIOLATION_KNDRow>
    {
        protected override ViolationKnd CreateByRow(ViolationKndDS.S_G_VIOLATION_KNDRow row)
        {
            var obj = new ViolationKnd(
              row.ID,
              row.NAMERU,
              row.NAMEKZ,
              row.TIMELINE,
              row.TYPE_TEXT_LETTER_ISSUER,
              row.IS_DELETE == 1,
              MapperRegistry.Instance.GetUserMapper().Find(row.ID_USR),
              row.DATLAST);

            return obj;
        }

        public override void Insert(ICollection<DomainObject> objCollection)
        {
            try
            {
                foreach (var obj in objCollection)
                {
                    var ViolationKnd = (ViolationKnd)obj;

                    using (var cmd = Connection.CreateCommand())
                    {
                        cmd.BindByName = true;
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.CommandText = "G_INS_VIOLATION_KND";
                        cmd.Parameters.Add("Id_", OracleDbType.Decimal, ParameterDirection.Output);
                        cmd.Parameters.Add("NameRu_", OracleDbType.Varchar2, ParameterDirection.Input);
                        cmd.Parameters.Add("NameKz_", OracleDbType.Varchar2, ParameterDirection.Input);
                        cmd.Parameters.Add("TimeLine_", OracleDbType.Decimal, ParameterDirection.Input);
                        cmd.Parameters.Add("Type_Text_Letter_Issuer_", OracleDbType.Varchar2, ParameterDirection.Input);
                        cmd.Parameters.Add("Is_Delete_", OracleDbType.Decimal, ParameterDirection.Input);
                        cmd.Parameters.Add("Err_Code", OracleDbType.Decimal, ParameterDirection.Output);
                        cmd.Parameters.Add("Err_Msg", OracleDbType.Varchar2, ParameterDirection.Output);

                        cmd.Parameters["NameRu_"].Value = ViolationKnd.NameRu;
                        cmd.Parameters["NameKz_"].Value = ViolationKnd.NameKz;
                        cmd.Parameters["TimeLine_"].Value = ViolationKnd.TimeLine;
                        cmd.Parameters["Type_Text_Letter_Issuer_"].Value = ViolationKnd.TextType; 
                        cmd.Parameters["Is_Delete_"].Value = ViolationKnd.IsDelete ? 1 : 0;
                        cmd.Parameters["Err_Msg"].Size = 4000;

                        cmd.ExecuteNonQuery();

                        if (!((OracleDecimal)cmd.Parameters["Err_Code"].Value).IsNull)
                        {
                            var errCode = ((OracleDecimal)cmd.Parameters["Err_Code"].Value).ToInt32();
                            var errMsg = cmd.Parameters["Err_Msg"].Value.ToString();
                            if (errCode != 0)
                                throw new OraCustomException(errCode, errMsg);
                        }

                        obj.SetId(((OracleDecimal)(cmd.Parameters["Id_"].Value)).Value);

                        MarkAsNeedLoad();
                    }
                }
            }
            catch (Exception ex)
            {
                var rethrow = ExceptionPolicy.HandleException(ex, "Data Policy");
                if (rethrow)
                    throw;
            }
        }

        public override void Update(ICollection<DomainObject> objCollection)
        {
            try
            {
                foreach (var obj in objCollection)
                {
                    var ViolationKnd = (ViolationKnd)obj;

                    using (var cmd = Connection.CreateCommand())
                    {
                        cmd.BindByName = true;
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.CommandText = "G_UPD_VIOLATION_KND";
                        cmd.Parameters.Add("Id_", OracleDbType.Decimal, ParameterDirection.Input);
                        cmd.Parameters.Add("NameRu_", OracleDbType.Varchar2, ParameterDirection.Input);
                        cmd.Parameters.Add("NameKz_", OracleDbType.Varchar2, ParameterDirection.Input);
                        cmd.Parameters.Add("TimeLine_", OracleDbType.Decimal, ParameterDirection.Input);
                        cmd.Parameters.Add("Type_Text_Letter_Issuer_", OracleDbType.Varchar2, ParameterDirection.Input);
                        cmd.Parameters.Add("Is_Delete_", OracleDbType.Decimal, ParameterDirection.Input);
                        cmd.Parameters.Add("Err_Code", OracleDbType.Decimal, ParameterDirection.Output);
                        cmd.Parameters.Add("Err_Msg", OracleDbType.Varchar2, ParameterDirection.Output);

                        cmd.Parameters["Id_"].Value = ViolationKnd.Id;
                        cmd.Parameters["NameRu_"].Value = ViolationKnd.NameRu;
                        cmd.Parameters["NameKz_"].Value = ViolationKnd.NameKz;
                        cmd.Parameters["TimeLine_"].Value = ViolationKnd.TimeLine;
                        cmd.Parameters["Type_Text_Letter_Issuer_"].Value = ViolationKnd.TextType;
                        cmd.Parameters["Is_Delete_"].Value = ViolationKnd.IsDelete ? 1 : 0;
                        cmd.Parameters["Err_Msg"].Size = 4000;

                        cmd.ExecuteNonQuery();

                        if (!((OracleDecimal)cmd.Parameters["Err_Code"].Value).IsNull)
                        {
                            var errCode = ((OracleDecimal)cmd.Parameters["Err_Code"].Value).ToInt32();
                            var errMsg = cmd.Parameters["Err_Msg"].Value.ToString();
                            if (errCode != 0)
                                throw new OraCustomException(errCode, errMsg);
                        }

                        MarkAsNeedLoad();
                    }
                }
            }
            catch (Exception ex)
            {
                var rethrow = ExceptionPolicy.HandleException(ex, "Data Policy");
                if (rethrow)
                    throw;
            }
        }

        public override void Delete(ICollection<DomainObject> objCollection)
        {
            try
            {
                foreach (var obj in objCollection)
                {
                    using (var cmd = Connection.CreateCommand())
                    {
                        cmd.BindByName = true;
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.CommandText = "G_DEL_ABILITY_CONVERT";
                        cmd.Parameters.Add("Id_", OracleDbType.Decimal, ParameterDirection.Input);
                        cmd.Parameters.Add("Err_Code", OracleDbType.Decimal, ParameterDirection.Output);
                        cmd.Parameters.Add("Err_Msg", OracleDbType.Varchar2, ParameterDirection.Output);
                        cmd.Parameters["Id_"].Value = obj.Id;
                        cmd.Parameters["Err_Msg"].Size = 4000;

                        cmd.ExecuteNonQuery();

                        if (!((OracleDecimal)cmd.Parameters["Err_Code"].Value).IsNull)
                        {
                            var errCode = ((OracleDecimal)cmd.Parameters["Err_Code"].Value).ToInt32();
                            var errMsg = cmd.Parameters["Err_Msg"].Value.ToString();
                            if (errCode != 0)
                                throw new OraCustomException(errCode, errMsg);
                        }

                        MarkAsNeedLoad();
                    }
                }
            }
            catch (Exception ex)
            {
                var rethrow = ExceptionPolicy.HandleException(ex, "Data Policy");
                if (rethrow)
                    throw;
            }
        }

        protected override string IdName()
        {
            return "ID";
        }
    }
}