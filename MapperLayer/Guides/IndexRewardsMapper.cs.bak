using System;
using System.Collections.Generic;
using System.Data;
using ARM_User.BusinessLayer.Common;
using ARM_User.BusinessLayer.Guides;
using ARM_User.DataLayer.DataSet.GuidesDataSet;
using ARM_User.MapperLayer.Common;
using Microsoft.Practices.EnterpriseLibrary.ExceptionHandling;
using Oracle.DataAccess.Client;
using Oracle.DataAccess.Types;

namespace ARM_User.MapperLayer.Guides
{
    public class IndexRewardsMapper
    :
    SimpleMapper
    <IndexRewards, IndexRewardsList, IndexRewardsDS.S_G_INDEX_REWARDSDataTable, IndexRewardsDS.S_G_INDEX_REWARDSRow>
    {
        protected override IndexRewards CreateByRow(IndexRewardsDS.S_G_INDEX_REWARDSRow row)
        {
            var obj = new IndexRewards(
            row.ID,
            row.NAMERU,
            row.NAMEKZ,
            row.IS_DELETE == 1,
            MapperRegistry.Instance.GetUserMapper().Find(row.ID_USR),
            row.DATLAST);

            return obj;
        }

        public override void Insert(ICollection<DomainObject> objCollection)
        {
            try
            {
                foreach (var obj in objCollection)
                {
                    var IndexRewards = (IndexRewards) obj;

                    using (var cmd = Connection.CreateCommand())
                    {
                        cmd.BindByName = true;
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.CommandText = "S_G_INS_INDEX_REWARDS";
                        cmd.Parameters.Add("Id_", OracleDbType.Decimal, ParameterDirection.Output);
                        cmd.Parameters.Add("NameRu_", OracleDbType.Varchar2, ParameterDirection.Input);
                        cmd.Parameters.Add("NameKz_", OracleDbType.Varchar2, ParameterDirection.Input);
                        cmd.Parameters.Add("Is_Delete_", OracleDbType.Decimal, ParameterDirection.Input);
                        cmd.Parameters.Add("Err_Code", OracleDbType.Decimal, ParameterDirection.Output);
                        cmd.Parameters.Add("Err_Msg", OracleDbType.Varchar2, ParameterDirection.Output);

                        cmd.Parameters["NameRu_"].Value = IndexRewards.NameRu;
                        cmd.Parameters["NameKz_"].Value = IndexRewards.NameKz;
                        cmd.Parameters["Is_Delete_"].Value = IndexRewards.IsDelete ? 1 : 0;
                        cmd.Parameters["Err_Msg"].Size = 4000;

                        cmd.ExecuteNonQuery();

                        if (!((OracleDecimal) cmd.Parameters["Err_Code"].Value).IsNull)
                        {
                            var errCode = ((OracleDecimal) cmd.Parameters["Err_Code"].Value).ToInt32();
                            var errMsg = cmd.Parameters["Err_Msg"].Value.ToString();
                            if (errCode != 0)
                                throw new OraCustomException(errCode, errMsg);
                        }

                        obj.SetId(((OracleDecimal) (cmd.Parameters["Id_"].Value)).Value);

                        MarkAsNeedLoad();
                    }
                }
            }
            catch (Exception ex)
            {
                var rethrow = ExceptionPolicy.HandleException(ex, "Data Policy");
                if (rethrow)
                    throw;
            }
        }

        public override void Update(ICollection<DomainObject> objCollection)
        {
            try
            {
                foreach (var obj in objCollection)
                {
                    var IndexRewards = (IndexRewards) obj;

                    using (var cmd = Connection.CreateCommand())
                    {
                        cmd.BindByName = true;
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.CommandText = "S_G_UPD_INDEX_REWARDS";
                        cmd.Parameters.Add("Id_", OracleDbType.Decimal, ParameterDirection.Input);
                        cmd.Parameters.Add("NameRu_", OracleDbType.Varchar2, ParameterDirection.Input);
                        cmd.Parameters.Add("NameKz_", OracleDbType.Varchar2, ParameterDirection.Input);
                        cmd.Parameters.Add("Is_Delete_", OracleDbType.Decimal, ParameterDirection.Input);
                        cmd.Parameters.Add("Err_Code", OracleDbType.Decimal, ParameterDirection.Output);
                        cmd.Parameters.Add("Err_Msg", OracleDbType.Varchar2, ParameterDirection.Output);

                        cmd.Parameters["Id_"].Value = IndexRewards.Id;
                        cmd.Parameters["NameRu_"].Value = IndexRewards.NameRu;
                        cmd.Parameters["NameKz_"].Value = IndexRewards.NameKz;
                        cmd.Parameters["Is_Delete_"].Value = IndexRewards.IsDelete ? 1 : 0;
                        cmd.Parameters["Err_Msg"].Size = 4000;

                        cmd.ExecuteNonQuery();

                        if (!((OracleDecimal) cmd.Parameters["Err_Code"].Value).IsNull)
                        {
                            var errCode = ((OracleDecimal) cmd.Parameters["Err_Code"].Value).ToInt32();
                            var errMsg = cmd.Parameters["Err_Msg"].Value.ToString();
                            if (errCode != 0)
                                throw new OraCustomException(errCode, errMsg);
                        }

                        MarkAsNeedLoad();
                    }
                }
            }
            catch (Exception ex)
            {
                var rethrow = ExceptionPolicy.HandleException(ex, "Data Policy");
                if (rethrow)
                    throw;
            }
        }

        public override void Delete(ICollection<DomainObject> objCollection)
        {
            try
            {
                foreach (var obj in objCollection)
                {
                    using (var cmd = Connection.CreateCommand())
                    {
                        cmd.BindByName = true;
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.CommandText = "S_G_DELETE_INDEX_REWARDS";
                        cmd.Parameters.Add("Id_", OracleDbType.Decimal, ParameterDirection.Input);
                        cmd.Parameters.Add("Err_Code", OracleDbType.Decimal, ParameterDirection.Output);
                        cmd.Parameters.Add("Err_Msg", OracleDbType.Varchar2, ParameterDirection.Output);
                        cmd.Parameters["Id_"].Value = obj.Id;
                        cmd.Parameters["Err_Msg"].Size = 4000;

                        cmd.ExecuteNonQuery();

                        if (!((OracleDecimal) cmd.Parameters["Err_Code"].Value).IsNull)
                        {
                            var errCode = ((OracleDecimal) cmd.Parameters["Err_Code"].Value).ToInt32();
                            var errMsg = cmd.Parameters["Err_Msg"].Value.ToString();
                            if (errCode != 0)
                                throw new OraCustomException(errCode, errMsg);
                        }

                        MarkAsNeedLoad();
                    }
                }
            }
            catch (Exception ex)
            {
                var rethrow = ExceptionPolicy.HandleException(ex, "Data Policy");
                if (rethrow)
                    throw;
            }
        }

        protected override string IdName()
        {
            return "ID";
        }
    }
}
